
// Function to convert Float32Array to Uint8Array
export function convertFloat32ArrayToUint8Array(floatArray) {
    return new Uint8Array(new Float32Array(floatArray).buffer);
}

// Function to convert Uint8Array back to array of floats
export function convertUint8ArrayToFloatArray(uint8Array) {
    const float32Array = new Float32Array(uint8Array.buffer);
    return Array.from(float32Array);
}

/*
   The node-llama-cpp library does not currently include methods named calculateDotProductSimilarity or calculateEuclideanSimilarity12. However, you can implement these similarity measures yourself using the embeddings generated by the library.
*/
export function calculateCosineSimilarity(vector1, vector2) {
    if (!Array.isArray(vector1) || !Array.isArray(vector2)) {
        throw new TypeError("Both arguments must be arrays.");
    }
    const dotProduct = vector1.reduce((sum, val, i) => sum + val * vector2[i], 0);
    const magnitude1 = Math.sqrt(vector1.reduce((sum, val) => sum + val * val, 0));
    const magnitude2 = Math.sqrt(vector2.reduce((sum, val) => sum + val * val, 0));
    return dotProduct / (magnitude1 * magnitude2);
}
/*
    The dot product, also known as the scalar product, is an algebraic operation that takes two equal-length sequences of numbers (usually vectors) and returns a single number. It is a measure of the extent to which two vectors are parallel.
*/   
export function calculateDotProduct(vector1, vector2) {
    if (!Array.isArray(vector1) || !Array.isArray(vector2)) {
        throw new TypeError("Both arguments must be arrays.");
    }
    return vector1.reduce((sum, val, i) => sum + val * vector2[i], 0);
}

/*
    Euclidean distance is a measure of the straight-line distance between two points in Euclidean space. It is the most common distance metric used in geometry and various applications such as clustering, classification, and image processing.
*/
export function calculateEuclideanDistance(vector1, vector2) {
    if (!Array.isArray(vector1) || !Array.isArray(vector2)) {
        throw new TypeError("Both arguments must be arrays.");
    }
    return Math.sqrt(vector1.reduce((sum, val, i) => sum + Math.pow(val - vector2[i], 2), 0));
}
